OOP:
1) Class
2) Object
3) Methods
4) Inheritance
5) Encaptulation
6) Polymorphism
7) Abstraction

========================================================================================
1-> Class : Ans: A class is a blueprint or template for creating objects. 
========================================================================================
2-> Object: An object is called an instance of a class. For example, suppose Bike is a class then we can create objects like bike1 , bike2 , etc from the class. 
========================================================================================
3-> Methods: Methods are functions that are associated with an object or a class.
========================================================================================
4-> Inheritance: Inheritance is a fundamental concept in object-oriented programming (OOP) that allows you to create new classes (subclasses or derived classes) based on existing classes (superclasses or base classes). 

Type of Inheritance:

I) Single Inheritance
II) Multiple  Inheritance
III) Multilevel Inheritance
IV) Hierarchical Inheritance
V) Hybrid Inheritance

Single Inheritance:
-------------------
class Parent:
    pass

class Child(Parent):
    pass


Multiple Inheritance:
---------------------
class Parent1:
    pass

class Parent2:
    pass

class Child(Parent1, Parent2):
    pass


Multilevel Inheritance:
------------------------
class Grandparent:
    pass

class Parent(Grandparent):
    pass

class Child(Parent):
    pass


Hierarchical Inheritance:
--------------------------
class Parent:
    pass

class Child1(Parent):
    pass

class Child2(Parent):
    pass


Hybrid Inheritance:
-------------------
class A:
    pass

class B(A):
    pass

class C(A):
    pass

class D(B, C):
    pass
========================================================================================
5-> Encaptulation:
Ans: Data and Method are binding in a single unit.
    Encaptulation = single unit(data + method)

Two main types of encapsulation:
I) Public Access (No Encapsulation)
II) Private Access (Encapsulation)

========================================================================================
6-> Polymorphism
# compileTime-> static binding-> early binding->overloading
# runtime-> dynamic binding -> late binding -> overriding


Ans: The term "polymorphism" in computer science and mathematics is composed of two Greek words:

Poly: "Poly" means "many" or "multiple."
Morphis: "Morphis" comes from "morphe," which means "form" or "shape."
When combined, "polymorphism" roughly translates to "many forms" or "multiple shapes."

I) Compile-Time Polymorphism (Static Binding):
Compile-time polymorphism, also known as static polymorphism, occurs when the decision about which method or function to call is made at compile-time (before the program is run).

class Calculator:
    def add(self, a, b):
        return a + b

    def add(self, a, b, c):
        return a + b + c

calc = Calculator()
result1 = calc.add(1, 2)          # Calls the first add method
result2 = calc.add(1, 2, 3)       # Calls the second add method


II)Run-Time Polymorphism (Dynamic Binding):
Run-time polymorphism, also known as dynamic polymorphism, occurs when the decision about which method or function to call is made at run-time (while the program is executing).

class Shape:
    def area(self):
        pass

class Circle(Shape):
    def area(self, radius):
        return 3.14 * radius ** 2

class Rectangle(Shape):
    def area(self, length, width):
        return length * width

circle = Circle()
rectangle = Rectangle()

shape1 = circle  # A Circle object treated as a Shape object
shape2 = rectangle  # A Rectangle object treated as a Shape object

result1 = shape1.area(5)           # Calls Circle's area method
result2 = shape2.area(4, 6)        # Calls Rectangle's area method

========================================================================================

7-> Abstraction:
Abstraction is one of the fundamental principles of object-oriented programming (OOP) that involves hiding complex implementation details and showing only the necessary features of an object.

Abstract Classes:
-------------------------------
*Python allows you to define abstract base classes (ABCs) using the abc module.
*Abstract classes cannot be instantiated directly but serve as templates for other classes.
*They define a common set of methods that must be implemented by concrete subclasses, ensuring that certain methods are present.

from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

Method Abstraction:
-------------------
Abstraction can be applied to methods within a class by using the @abstractmethod decorator.
This decorator marks a method as abstract, indicating that it must be overridden in concrete subclasses.

from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def make_sound(self):
        pass

class Dog(Animal):
    def make_sound(self):
        return "Woof!"

class Cat(Animal):
    def make_sound(self):
        return "Meow!"

Data Abstraction:
------------------

Abstraction can also be applied to data attributes by making them private or protected.
This restricts direct access to the internal state of an object and encourages access through methods, providing better control over data manipulation.

class BankAccount:
    def __init__(self, account_number, balance):
        self._account_number = account_number  # Protected attribute
        self._balance = balance

    def get_balance(self):
        return self._balance

    def deposit(self, amount):
        self._balance += amount

    def withdraw(self, amount):
        if self._balance >= amount:
            self._balance -= amount
        else:
            print("Insufficient balance")

account = BankAccount("12345", 1000)
balance = account.get_balance()  # Accessing data through a method

